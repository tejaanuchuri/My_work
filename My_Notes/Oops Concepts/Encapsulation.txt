 Encapsulation :
    => Encapsulation is defined as wrapping up of data and information under a single unit. 
    => It is the process of binding together the data and functions in a class.
    => It is applied to prevent direct access to the data for security reasons.
    => The functions of class are applied for this purpose. 
    => For example, the net banking facility to the customers allows only the 
       authorized person with the required login id and password to get access 
       and that too only for his/her part of the information in the bank datasource.

Role of access specifiers in encapsulation:
    => access specifiers plays an important role in implementing encapsulation in C++.
       The process of implementing encapsulation can be sub-divided into two steps:
       => The data members should be labeled as private using the private access specifiers.
       => The member function which manipulates the data members should be labeled as public using the public access specifier.

class Encapsulation 
{ 
    private: 
        // data hidden from outside world 
        int x; 
          
    public: 
        // function to set value of  
        // variable x 
        void set(int a) 
        { 
            x =a; 
        } 
          
        // function to return value of 
        // variable x 
        int get() 
        { 
            return x; 
        } 
}; 

int main() 
{ 
    Encapsulation obj; 
      
    obj.set(5); 
      
    cout<<obj.get(); 
    return 0; 
} 

Advantages of Encapsulation:

    => Data Hiding: 
       The user will have no idea about the inner implementation of the class.
       It will not be visible to the user that how the class is storing values in the variables.
       He only knows that we are passing the values to a setter method and variables are getting initialized with that value.
    
    => Increased Flexibility:
       We can make the variables of the class as read-only or write-only depending on our requirement.
       If we wish to make the variables as read-only then we have to omit the setter methods like setName(), setAge() etc. from the above program or if we wish to make the variables as write-only then we have to omit the get methods like getName(), getAge() etc. from the above program
    
    => Reusability: 
       Encapsulation also improves the re-usability and easy to change with new requirements.
       Testing code is easy: Encapsulated code is easy to test for unit testing.